# Data section
.data
promptL:    .asciiz "Enter value for L: "
promptM:    .asciiz "Enter value for M: "
promptN:    .asciiz "Enter value for N: "
illegalMsg: .asciiz "Illegal Number! Enter a number greater than 20\n"
gcdMsg:     .asciiz "GCD: "
debugStartMsg: .asciiz "Program Start\n"
debugExitMsg:  .asciiz "Program Exit\n"
# Text section
.text
main:
    # Debugging: Print a message at the beginning of the program
    li $v0, 4
    la $a0, debugStartMsg
    syscall
# Step 1: Input three integer numbers L, M, and N
    li $v0, 4
    la $a0, promptL
    syscall
    jal getInput   # Get input for L
    move $s0, $v0  # Save L in $s0
li $v0, 4
    la $a0, promptM
    syscall
    jal getInput   # Get input for M
    move $s1, $v0  # Save M in $s1
    li $v0, 4
    la $a0, promptN
    syscall
    jal getInput   # Get input for N
    move $s2, $v0  # Save N in $s2
# Check if numbers are legal
    ble $s0, 20, illegalInput
    ble $s1, 20, illegalInput
    ble $s2, 20, illegalInput 
 # Call gcd calculation function
    jal gcdCalculation
# Debugging: Print a message before exiting the program
    li $v0, 4
    la $a0, debugExitMsg
    syscall

# Exit program
    li $v0, 10
    syscall

getInput:
    li $v0, 5      # Read integer input
    syscall
    
    jr $ra         # Return with the input value

illegalInput:
    li $v0, 4      # Print error message
    la $a0, illegalMsg
    syscall
    
    j main         # Restart the input process


    # Debugging: Print GCD
    li $v0, 4
    la $a0, gcdMsg
    syscall

    # Print the result
    li $v0, 1
    move $a0, $s3
    syscall

    # Exit program
    li $v0, 10
    syscall

euclideanGCD:
    move $t0, $s1   # Copy $s1 to $t0
    move $t1, $s2   # Copy $s2 to $t1
